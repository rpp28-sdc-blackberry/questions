# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1


jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:15.1
        environment:
          NODE_ENV: test
          TEST_DATABASE_URL: postgresql://postgres@localhost/qna-test
          # POSTGRES_USER: postgres
          POSTGRES_DB: qna-test
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
      - image: circleci/postgres:9.6-alpine
        environment:
        #   POSTGRES_USER: postgres
          POSTGRES_DB: qna-test
    steps:
      # Checkout the code as the first step.
      - checkout
      - run: sudo apt-get update && sudo apt-get install postgresql-client
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "CREATE TABLE questions (
              question_id SERIAL PRIMARY KEY,
              product_id integer,
              question_body text,
              question_date timestamp DEFAULT CURRENT_TIMESTAMP(0),
              asker_name text,
              asker_email text,
              reported boolean DEFAULT false,
              question_helpfulness integer DEFAULT 0
            );"
          -c "CREATE TABLE answers (
              answer_id SERIAL PRIMARY KEY,
              question_id integer REFERENCES questions ON DELETE CASCADE,
              body text,
              date timestamp DEFAULT CURRENT_TIMESTAMP(0),
              answerer_name text,
              answerer_email text,
              reported boolean DEFAULT false,
              helpfulness integer DEFAULT 0
            );"
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "INSERT INTO questions (product_id, question_body, asker_name, asker_email) VALUES(1, 'test body1', 'test1', 'test1@g.com');"
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "SELECT * FROM questions;"
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      # - node/install-packages:
      #     pkg-manager: yarn
      # - run:
      #     name: Wait for Postgres to start
      #     command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run tests
          command: npm test

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - build-and-test
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test
